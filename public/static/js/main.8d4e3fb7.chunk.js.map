{"version":3,"sources":["components/header/Header.js","components/img-upload/ImgUpload.js","components/photo-form/PhotoForm.js","components/img-card/ImgCard.js","API/index.js","home/Home.js","album/Album.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","ImgUpload","state","images","previewVisible","previewImage","uploadImage","_ref","file","onError","filename","onProgress","onSuccess","reader","FileReader","onloadend","_this","setState","concat","Object","toConsumableArray","objectSpread","url","result","props","onImageUpload","onprogress","onerror","readAsDataURL","handleDismissPreview","handlePreview","thumbUrl","this","nextProps","_this$state","upload","name","listType","defaultFileList","showUploadList","customRequest","onPreview","icon","type","modal","visible","footer","onCancel","alt","style","width","src","Component","TextArea","FormItem","es_form","Item","PhotoForm","formVisible","form","values","photos","title","desc","errors","photo","onClose","handleValueChange","event","_event$target","target","value","defineProperty","handleImageUpload","map","img","handleSubmit","preventDefault","hideTitleField","length","onSubmit","_this$props","submitting","drawer","placement","closable","maskClosable","layout","label","help","validateStatus","input","placeholder","onChange","img_upload_ImgUpload","es_button","htmlType","loading","ImgCard","data-testid","backgroundImage","Axios","defaults","baseURL","process","REACT_APP_API_BASE_URL","axios","create","headers","Accept","createAlbum","payload","post","then","response","data","addPhotos","findAlbums","params","get","findPhotos","searchPhotos","searchAlbums","Home","q","albums","loadAlbums","docs","forEach","doc","id","albumsPromises","album","Promise","all","albumWithPhotos","albumId","handleCreateAlbumClick","setTimeout","description","uri","message","success","catch","error","components_header_Header","onClick","keys","key","Link","to","components_img_card_ImgCard","photo_form_PhotoForm","Album","handleAddPhotoClick","match","_this2","loadingAlbum","findAlbumById","loadPhotos","react","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d4e3fb7.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = () => (\n    <header className='Header'>\n        <h2>Photo Book</h2>\n    </header>\n)\n\nexport default Header;","import React, { Component } from 'react';\nimport { Upload, Icon, Modal} from 'antd';\nimport PropTypes from 'prop-types';\n\n\nclass ImgUpload extends Component {\n    state = {\n        images: [],\n        previewVisible: false,\n        previewImage: '',\n    }\n\n    static propTypes = {\n        // default images is available\n        images: PropTypes.array,\n        // Called everytime a new photo is uploaded\n        onImageUpload: PropTypes.func.isRequired,\n    }\n\n    componentDidMount() {\n        const { images } = this.props;\n        if (images) {\n            this.setState({ images });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.images !== this.props.images) {\n            this.setState({ images: nextProps.images });\n        }\n    }\n\n    uploadImage = ({ file, filename, onError, onProgress, onSuccess }) => {\n\n        let reader = new FileReader();\n\n        reader.onloadend = () => {\n            this.setState(state => ({\n                images: [...state.images, {\n                    ...file,\n                    // url: reader.result.split(',')[1]\n                    url: reader.result\n                }]\n            }));\n            this.props.onImageUpload(this.state.images);\n            onSuccess(reader.result, file);\n        }\n        reader.onprogress = onProgress;\n        reader.onerror = onError;\n\n        reader.readAsDataURL(file)\n    }\n\n    handleDismissPreview = () => this.setState({ previewVisible: false })\n\n    handlePreview = (file) => {\n        this.setState({\n            previewImage: file.url || file.thumbUrl,\n            previewVisible: true,\n        });\n    }\n\n    render() {\n        const { images, previewImage, previewVisible } = this.state;\n\n        return (\n            <Upload\n                name=\"avatar\"\n                listType=\"picture-card\"\n                className=\"avatar-uploader\"\n                defaultFileList={images}\n                showUploadList={true}\n                customRequest={this.uploadImage}\n                onPreview={this.handlePreview}\n            >\n                <div>\n                    <Icon type=\"plus\" />\n                    <div className=\"ant-upload-text\">Upload</div>\n                </div>\n                <Modal visible={previewVisible} footer={null} onCancel={this.handleDismissPreview}>\n                    <img alt=\"Vendor visual\" style={{ width: '100%' }} src={previewImage} />\n                </Modal>\n            </Upload>\n        )\n\n    }\n}\n\nexport default ImgUpload;","import React, { Component } from 'react';\nimport { Input, Button, Drawer, Form } from 'antd';\nimport PropTypes from 'prop-types';\nimport ImgUpload from '../img-upload';\n\nconst { TextArea } = Input;\nconst FormItem = Form.Item;\n\nclass PhotoForm extends Component {\n    state = {\n        formVisible: false,\n        form: {\n            values: {\n                photos: [],\n                title: '',\n                desc: ''\n            },\n            errors: {\n                title: '',\n                desc: '',\n                photo: ''\n            }\n        },\n    }\n\n    static propTypes = {\n        // control drawer visibility\n        visible: PropTypes.bool.isRequired,\n        // function called on submitting this form\n        onSubmit: PropTypes.func.isRequired,\n        // function called to close the drawer\n        onClose: PropTypes.func.isRequired,\n        // Form title\n        title: PropTypes.string,\n        // submitting state status\n        submitting: PropTypes.bool,\n        // Hide form title field(applicable when this form is used in photo context)\n        hideTitleField: PropTypes.bool\n    }\n\n\n    onClose = () => {\n        this.setState({ formVisible: false });\n    }\n\n    handleValueChange = (event) => {\n        const { name, value } = event.target;\n        this.setState(state => ({\n            form: {\n                values: { ...state.form.values, [name]: value },\n                errors: {  ...state.form.errors, [name]: '' }\n            }\n        }));\n    }\n\n    handleImageUpload = (images) => {\n        const photos = images.map(img => img.url);\n        this.setState(state => ({\n            form: {\n                errors: { ...state.form.errors, photo: '', },\n                values: { ...state.form.values, photos: photos }\n            }\n        }));\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const { form } = this.state;\n        const { hideTitleField } = this.props;\n        if (hideTitleField && (!form.values.desc || !form.values.photos.length)) {\n            this.setState(state => ({\n                form: {\n                    errors: {\n                        desc: !form.values.desc ? 'Description is required' : '',\n                        photo: !form.values.photos.length ? 'Photo is required' : ''\n                    },\n                    values: { ...state.form.values }\n                }\n            }));\n            return;\n        }\n        if (!hideTitleField && (!form.values.title || !form.values.desc || !form.values.photos.length)) {\n            this.setState(state => ({\n                form: {\n                    errors: {\n                        title: !form.values.title ? 'Title is required' : '',\n                        desc: !form.values.desc ? 'Description is required' : '',\n                        photo: !form.values.photos.length ? 'Photo is required' : ''\n                    },\n                    values: { ...state.form.values }\n                }\n            }));\n            return;\n        }\n        this.props.onSubmit(this.state.form.values);\n    }\n\n    render() {\n        const { form } = this.state;\n        const { visible, onClose, title, submitting, hideTitleField } = this.props;\n\n        return (\n            <Drawer\n                title={title}\n                placement=\"right\"\n                closable={true}\n                maskClosable={false}\n                width='50%'\n                onClose={onClose}\n                visible={visible}\n            >\n                <Form layout='vertical' onSubmit={this.handleSubmit}>\n                    {\n                        !hideTitleField ? <FormItem label='Title' help={form.errors.title || ''} validateStatus={form.errors.title ? 'error' : ''}>\n                            <Input placeholder='Title' name='title' value={form.values.title} onChange={this.handleValueChange} />\n                        </FormItem> : null\n                    }\n                    <FormItem label='Description' help={form.errors.desc || ''} validateStatus={form.errors.desc ? 'error' : ''}>\n                        <TextArea placeholder='Description' name='desc' value={form.values.desc} onChange={this.handleValueChange} />\n                    </FormItem>\n                    <FormItem label='Photos' help={form.errors.photo || ''} validateStatus={form.errors.photo ? 'error' : ''}>\n                        <ImgUpload onImageUpload={this.handleImageUpload} />\n                    </FormItem>\n                    <FormItem>\n                        <Button type='primary' htmlType='submit' loading={submitting}>Submit</Button>\n                    </FormItem>\n                </Form>\n            </Drawer>\n        )\n    }\n}\n\nexport default PhotoForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ImgCard.css';\n\nconst ImgCard = ({ style, src, title, desc }) => (\n    <figure className='ImgCard' style={style}>\n        <div className='ImgCard-img-wrapper'>\n            <div className='ImgCard-img' data-testid=\"image\" style={{ backgroundImage: `url(${src})` }}></div>\n            <div className='ImgCard-mask'>\n                <h3 className='ImgCard-title'>{title}</h3>\n            </div>\n        </div>\n        <figcaption>{desc}</figcaption>\n    </figure>\n\n);\n\nImgCard.propTypes = {\n    style: PropTypes.object,\n    src: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    desc: PropTypes.string\n}\n\nexport default ImgCard;","/**\n * @file\n * @description API client file, it's an API layer to connect to the backend\n */\n\n//  dependencies\nimport Axios from 'axios';\nAxios.defaults.baseURL = process.env.REACT_APP_API_BASE_URL;\n\n\n/**\n * Axios public instance\n */\nconst axios = Axios.create({\n    headers: {\n        Accept: 'application/json',\n    },\n});\n\n/**\n * Create new album\n * @param {Object} payload - Album data \n */\nexport const createAlbum = payload =>\n    axios.post('/albums', payload).then(response => response.data);\n\n/**\n * Add photos in the album\n * @param {Object} payload - Photo  \n */\nexport const addPhotos = payload =>\n    axios.post('/photos', payload).then(response => response.data);\n\n/**\n * Retrieve albums \n * @param {Object} params - Query string params \n */\nexport const findAlbums = (params) =>\n    axios.get('/albums', { params }).then(response => response.data);\n\n/**\n * Retrieve album by Id\n * @param {string} albumId - album Id \n */\nexport const findAlbumById = albumId =>\n    axios.get(`/albums/${albumId}`).then(response => response.data);\n/**\n * Retrieve photos\n * @param {Object} params - Query string params \n */\nexport const findPhotos = (params) =>\n    axios.get('/photos', { params }).then(response => response.data);\n\n/**\n * Search photos using keyword\n * @param {object} params - query string params \n */\nexport const searchPhotos = (params) =>\n    axios.get('/photos/search', { params }).then(response => response.data);\n\n/**\n * Search albums using keyword\n * @param {object} params - query string params \n */\nexport const searchAlbums = params =>\n    axios.get('/albums/search', { params }).then(response => response.data);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, message } from 'antd';\nimport Header from '../components/header';\nimport PhotoForm from '../components/photo-form';\nimport ImgCard from '../components/img-card';\nimport { createAlbum, addPhotos, findAlbums, findPhotos, searchAlbums } from '../API';\nimport './Home.css';\n\n\nclass Home extends Component {\n    state = {\n        formVisible: false,\n        q: '',\n        submitting: false,\n        albums: {}\n    }\n\n    componentDidMount() {\n        this.loadAlbums();\n    }\n\n    loadAlbums = () => {\n        const albums = {};\n        findAlbums()\n            .then(docs => {\n                docs.forEach(doc => {\n                    albums[doc.id] = doc;\n                });\n                const albumsPromises = docs\n                    .map(album => findPhotos({ album: album.id }));\n                return Promise.all(albumsPromises);\n            })\n            .then(result => {\n                const albumWithPhotos = {};\n                result.forEach(photos => {\n                    if (photos.length) {\n                        const albumId = photos[0].album;\n                        albumWithPhotos[albumId] = { ...albums[albumId], photos };\n                    }\n                });\n                this.setState({ albums: albumWithPhotos });\n            });\n    }\n\n    handleCreateAlbumClick = () => {\n        this.setState({ formVisible: true });\n    }\n\n    onClose = () => {\n        this.setState({ formVisible: false });\n    }\n\n    handleValueChange = (event) => {\n        const q = event.target.value;\n        this.setState({ q: event.target.value });\n        setTimeout(() => {\n            // Timeout allow time for user to type before actual filtering started\n            // it just serve to reduce number of unnecessary request to the server\n            if (q) {\n                const albums = {};\n                searchAlbums({ q })\n                    .then(docs => {\n                        docs.forEach(doc => {\n                            albums[doc.id] = doc;\n                        });\n                        const albumsPromises = docs\n                            .map(album => findPhotos({ album: album.id }));\n                        return Promise.all(albumsPromises);\n                    })\n                    .then(result => {\n                        const albumWithPhotos = {};\n                        result.forEach(photos => {\n                            if (photos.length) {\n                                const albumId = photos[0].album;\n                                albumWithPhotos[albumId] = { ...albums[albumId], photos };\n                            }\n                        });\n                        this.setState({ albums: albumWithPhotos });\n                    });\n            } else {\n                // query is empty\n                this.loadAlbums();\n            }\n        }, 500);\n    }\n\n    handleSubmit = (data) => {\n        const { title, desc, photos } = data;\n        this.setState({ submitting: true });\n        createAlbum({ title, description: desc })\n            .then(result => {\n                const { id } = result;\n                const payload = photos.map(photo => ({ uri: photo, album: id }));\n                return addPhotos(payload);\n            })\n            .then(() => {\n                this.setState({ submitting: false, formVisible: false, title: '', photos: [] });\n                message.success('Album has been successfully created');\n                this.loadAlbums();\n            })\n            .catch(() => {\n                this.setState({ submitting: false, formVisible: false, title: '', photos: [] });\n                message.error('album creation failed');\n            });\n    }\n\n    render() {\n        const { albums, formVisible, submitting, q } = this.state;\n\n        return (\n            <section>\n                <Header />\n                <section className='Home-content'>\n                    <h3>Discover Amazing Albums</h3>\n                    <div className='Home-actions'>\n                        <Input placeholder='Search Albums using keywords...' value={q} onChange={this.handleValueChange} />\n                        &nbsp;&nbsp;\n                        <Button icon=\"plus\" onClick={this.handleCreateAlbumClick}>Create New Album</Button>\n                    </div>\n                    <div className='Home-albums'>\n                        {\n                            Object.keys(albums).length ? Object.keys(albums)\n                                .map(key => (\n                                    <Link key={key} to={`albums/${albums[key].id}`} title='Click to view this album'>\n                                        <ImgCard src={albums[key].photos[0].uri} title={albums[key].title} />\n                                    </Link>)) : ''\n                        }\n                    </div>\n                    <PhotoForm\n                        title='New Album'\n                        visible={formVisible}\n                        submitting={submitting}\n                        onSubmit={this.handleSubmit}\n                        onClose={this.onClose}\n                    />\n                </section>\n\n            </section>\n        )\n    }\n}\n\nexport default Home;","import React, { Component, Fragment } from 'react';\nimport { Input, Button, message } from 'antd';\nimport Header from '../components/header';\nimport ImgCard from '../components/img-card';\nimport PhotoForm from '../components/photo-form';\nimport { addPhotos, findAlbumById, findPhotos, searchPhotos } from '../API';\nimport './Album.css';\n\nclass Album extends Component {\n    state = { photos: [], title: '', q: '', formVisible: false, submitting: false };\n\n    componentDidMount() {\n        const { albumId } = this.props.match.params;\n        const loadingAlbum = findAlbumById(albumId).then(album => {\n            this.setState({ title: album.title })\n        });\n        const loadPhotos = findPhotos({ album: albumId })\n            .then(photos => {\n                this.setState({ photos });\n            });\n\n        Promise\n            .all([loadingAlbum, loadPhotos]);\n    }\n\n    handleImageUpload = images => {\n        this.setState({ photos: images });\n    }\n\n    handleAddPhotoClick = () => {\n        this.setState({ formVisible: true });\n    }\n\n    onClose = () => {\n        this.setState({ formVisible: false });\n    }\n\n    handleValueChange = (event) => {\n        const q = event.target.value;\n        this.setState({ q: event.target.value });\n        setTimeout(() => {\n            // Timeout allow time for user to type before actual filtering\n            // starts just to reduce number of unnecessary request to the server\n            if (q) {\n                searchPhotos({ q })\n                    .then(photos => this.setState({ photos }))\n            } else {\n                // query is empty\n                const { albumId } = this.props.match.params;\n                findPhotos({ album: albumId })\n                    .then(photos => {\n                        this.setState({ photos });\n                    });\n            }\n        }, 500);\n    }\n\n    handleSubmit = (data) => {\n        const { albumId } = this.props.match.params;\n        const photos = data.photos.map(photo => ({\n            uri: photo,\n            description: data.desc, album: albumId\n        }));\n        this.setState({ submitting: true });\n        addPhotos(photos)\n            .then(() => {\n                this.setState({ submitting: false, formVisible: false, });\n                message.success('Picture added successfully');\n                findPhotos({ album: albumId })\n                    .then(photos => {\n                        this.setState({ photos });\n                    });\n            })\n            .catch(() => {\n                this.setState({ submitting: false, formVisible: false, });\n                message.error(' add picture fails');\n            });\n    }\n\n    render() {\n        const { title, photos, formVisible, submitting, q } = this.state;\n        return (\n            <section>\n                <Header />\n                <section className='Album'>\n                    <h2 className='Album-header'>{title} Album </h2>\n                    <div className='Album-filter'>\n                        <Input placeholder='Search photos using keywords...' value={q} onChange={this.handleValueChange} />\n                        &nbsp;&nbsp;\n                        <Button icon=\"plus\" onClick={this.handleAddPhotoClick}>Add photo</Button>\n                    </div>\n                    <div className='Album-pictures'>\n                        <Fragment>\n                            {\n                                photos.map(photo => <ImgCard key={photo.id} desc={photo.description} src={photo.uri} />)\n                            }\n                        </Fragment>\n                    </div>\n                </section>\n                <PhotoForm\n                    title='New Photo'\n                    visible={formVisible}\n                    submitting={submitting}\n                    onSubmit={this.handleSubmit}\n                    onClose={this.onClose}\n                    hideTitleField\n                />\n            </section >\n        )\n    }\n}\n\nexport default Album;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './home';\nimport Album from './album';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/albums/:albumId' component={Album} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}